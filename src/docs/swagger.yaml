openapi: 3.0.3
info:
  title: Apni Coaching Server 3.0
  description: |-
    This is a production level code written in typescript.
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://apni-coaching-netlify.app
  contact:
    email: msy8795@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:80/api/v1
tags:
  - name: User Controller
    description: Operations about user
  - name: Admin Controller
    description: Operations about admin
paths:
  /user/login:
    post:
      tags:
        - User Controller
      summary: login user
      description: Route for user to login in the application.
      operationId: loginUser
      requestBody:
        description: Requested user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'          
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - bearerAuth: []
  /user/create:
    post:
      tags:
        - User Controller
      summary: create user
      description: Route for user to create in the application.
      operationId: createUser
      requestBody:
        description: Requested user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description:  User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Rote not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /user/logout:
    post:
      tags:
        - User Controller
      summary: logout user
      description: Route for user to logout in the application.
      operationId: logoutUser
      requestBody:
        description: Requested user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutUser'
        required: true
      responses:
        '204':
          description: Logout user successfully
        '401':
          description: Invalid tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin/create/student:
    post:
      tags:
        - Admin Controller
      summary: create student
      description: Route for admin to create student in the application.
      operationId: createStudent
      requestBody:
        description: Requested student object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent'
        required: true
      responses:
        '201':
          description:  Student created successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin/create/teacher:
    post:
      tags:
        - Admin Controller
      summary: create teacher
      description: Route for admin to create teacher in the application.
      operationId: createTeacher
      requestBody:
        description: Requested teacher object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeacher'
        required: true
      responses:
        '201':
          description:  Teacher created successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin/create/post:
    post:
      tags:
        - Admin Controller
      summary: create post
      description: Route for admin to create post in the application.
      operationId: createPost
      requestBody:
        description: Requested post object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
        required: true
      responses:
        '201':
          description:  Post created successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin//create/department:
    post:
      tags:
        - Admin Controller
      summary: create department
      description: Route for admin to create department in the application.
      operationId: createDepartment
      requestBody:
        description: Requested department object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepartment'
        required: true
      responses:
        '201':
          description:  Department created successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin/getUsersAddedList:
    get:
      tags:
        - Admin Controller
      summary: get users added list
      description: Route for admin to get users added list in the application.
      operationId: getUsersAddedList
      responses:
        '200':
          description:  Users added list fetched successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin/students/missed-installments/batch-wise:
    get:
      tags:
        - Admin Controller
      summary: get students missed installments batch wise
      description: Route for admin to get students missed installments batch wise in the application.
      operationId: getStudentsMissedInstallmentsBatchWise
      responses:
        '200':
          description:  Students missed installments batch wise fetched successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
  /admin/getTeachersList:
    get:
      tags:
        - Admin Controller
      summary: get teachers list
      description: Route for admin to get teachers list in the application.
      operationId: getTeachersList
      responses:
        '200':
          description:  Teachers list fetched successfully          
        '400':
          description: Paramater missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
        '405':
          description: Validation exception
        '500':
          description: Internal server error
      security:
        - bearerAuth: []
components:
  schemas:
    LoginUser:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: Password1!
    
    LoginResponse:
      type: object
      properties:
        userDetails:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
            role:
              type: string
        tokens:
          type: object
          properties:
            access:
              type: object
              properties:
                token:
                  type: string
                expires:
                  type: string
                  format: date-time
            refresh:
              type: object
              properties:
                token:
                  type: string
                expires:
                  type: string
                  format: date-time
    CreateUser:
      type: object
      properties:
        username:
          type: string
          example: john123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: team@apnicoacing.com
        password:
          type: string
          example: Password1!
        role:
          type: string
          example: admin
    CreateUserResponse:
      type: object
      properties:
        message:
          type: string
          description: User created successfully
        user:
          type: object
          properties:
            username:
              type: string
              example: john123
            firstName:
              type: string
              example: John
            lastName:
              type: string
              example: Doe
            email:
              type: string
              example:
            role:
              type: string
              example: admin
            isEmailVerified:
              type: boolean
              example: false
            password:
              type: string
              example: Password1!
            id:
              type: string
              example: 5f9b3b3b5f9b3b3b5f9b3b3b
            userId:
              type: number
              example: 12
            createdAt:
              type: string
              format: date-time
            updatedAt:  
              type: string
              format: date-time
    LogoutUser:
      type: object
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NTg0MGRlZDA0N2Y3ZGUyYWU1NmY2ZTYiLCJpYXQiOjE3MDQ4MTcxNDU1NDAsImV4cCI6MTcwNzQwOTE0NTU0MCwiYXVkIjoiYWRtaW4iLCJ0eXBlIjoicmVmcmVzaCJ9.93iDfEmf9sZU-MlGWnCdmcbQ-k5MAEbAN7z2rfv4fIo        
    CreateStudent:
      type: object
      properties:
        username:
          type: string
          example: john123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: team@apnicoacing.com
        password:
          type: string
          example: Password1!
        role:
          type: string
          example: admin
        batch:
          type: string
          example: Alpha
        address:
          type: object
          properties:
            location:
              type: string
              example: 123, New York
            state:
              type: string
              example: 123, New York
            zip:
              type: number
              example: 123
        parentName:
          type: string
          example: John Doe
        parentEmail:
          type: string
          example: jon@google.com
        payment:
          type: number
          example: 1000

    CreateTeacher:
      type: object
      properties:
        username:
          type: string
          example: john123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: team@apnicoacing.com
        password:
          type: string
          example: Password1!
        role:
          type: string
          example: admin
        post:
          type: string
          example: Teacher
        department:
          type: string
          example: Physics
    CreatePost:
      type: string
      example: Teacher    
    CreateDepartment:
      type: string
      example: Physics
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Unauthorized
        error:
          type: string
          description: Incorrect email or password
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    User:
      description: testing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginUser'
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >-
        Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345".
